/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLabtestArgs } from "./CreateLabtestArgs";
import { UpdateLabtestArgs } from "./UpdateLabtestArgs";
import { DeleteLabtestArgs } from "./DeleteLabtestArgs";
import { LabtestFindManyArgs } from "./LabtestFindManyArgs";
import { LabtestFindUniqueArgs } from "./LabtestFindUniqueArgs";
import { Labtest } from "./Labtest";
import { LabtestService } from "../labtest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Labtest)
export class LabtestResolverBase {
  constructor(
    protected readonly service: LabtestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "read",
    possession: "any",
  })
  async _labtestsMeta(
    @graphql.Args() args: LabtestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Labtest])
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "read",
    possession: "any",
  })
  async labtests(
    @graphql.Args() args: LabtestFindManyArgs
  ): Promise<Labtest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Labtest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "read",
    possession: "own",
  })
  async labtest(
    @graphql.Args() args: LabtestFindUniqueArgs
  ): Promise<Labtest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labtest)
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "create",
    possession: "any",
  })
  async createLabtest(
    @graphql.Args() args: CreateLabtestArgs
  ): Promise<Labtest> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labtest)
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "update",
    possession: "any",
  })
  async updateLabtest(
    @graphql.Args() args: UpdateLabtestArgs
  ): Promise<Labtest | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Labtest)
  @nestAccessControl.UseRoles({
    resource: "Labtest",
    action: "delete",
    possession: "any",
  })
  async deleteLabtest(
    @graphql.Args() args: DeleteLabtestArgs
  ): Promise<Labtest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
